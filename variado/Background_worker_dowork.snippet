<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>Background_worker_dowork</Title>
      <Author>ASENIOR</Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>
      </Shortcut>
    </Header>
    <Snippet>
      <Code Language="csharp"><![CDATA[private DataParameter _inputparameter;

//llamo la funcion
if (!backgroundWorker1.IsBusy)
{
    _inputparameter.delay = 100;
    _inputparameter.process = 1200;
    backgroundWorker1.RunWorkerAsync(_inputparameter);

}

//cancelo 
if (backgroundWorker1.IsBusy)
{
    backgroundWorker1.CancelAsync();
}

//funcion
private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
{
    int process = ((DataParameter) e.Argument).process;
    int delay = ((DataParameter) e.Argument).delay;
    int index = 1;
    try
    {
        for (int i = 0; i < process; i++)
        {
            if (!backgroundWorker1.CancellationPending)
            {
                //backgroundWorker1.ReportProgress(index++ * 100 / process);
                backgroundWorker1.ReportProgress(index++ * 100 / process, string.Format("process data{0}", i));
                Thread.Sleep(delay);
            }
        }
    }
    catch (Exception ex)
    {
        backgroundWorker1.CancelAsync();
        MessageBox.Show(ex.Message);
    }

}

//work listo
private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
{
    MessageBox.Show("Listo");
}

private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
{
    progressBar1.Value = e.ProgressPercentage;
    label1.Text = "Procesado ... " + e.ProgressPercentage.ToString();
    progressBar1.Update();
}]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>